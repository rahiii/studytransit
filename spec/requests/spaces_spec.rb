require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/spaces", type: :request do
  let!(:library) { Library.create!(name: "Butler", location: "Columbia University") }
  # This should return the minimal set of attributes required to create a valid
  # Space. As you add validations to Space, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "Main Room",
      capacity: 3,
      library_id: library.id
    }
  }

  let(:invalid_attributes) {
    {
      name: "",
      capacity: 10, # invalid based on validation 1..5
      library_id: nil
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Space.create! valid_attributes
      get spaces_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      space = Space.create! valid_attributes
      get space_url(space)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_space_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      space = Space.create! valid_attributes
      get edit_space_url(space)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Space" do
        expect {
          post spaces_url, params: { space: valid_attributes }
        }.to change(Space, :count).by(1)
      end

      it "redirects to the created space" do
        post spaces_url, params: { space: valid_attributes }
        expect(response).to redirect_to(space_url(Space.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Space" do
        expect {
          post spaces_url, params: { space: invalid_attributes }
        }.to change(Space, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post spaces_url, params: { space: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "Updated Room",
          capacity: 4
        }
      }

      it "updates the requested space" do
        space = Space.create! valid_attributes
        patch space_url(space), params: { space: new_attributes }
        space.reload
        expect(space.name).to eq("Updated Room")
        expect(space.capacity).to eq(4)
      end

      it "redirects to the library page" do
        space = Space.create! valid_attributes
        patch space_url(space), params: { space: new_attributes }
        space.reload
        expect(response).to redirect_to(library_url(space.library))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the error on library page)" do
        space = Space.create! valid_attributes
        patch space_url(space), params: { space: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested space" do
      space = Space.create! valid_attributes
      expect {
        delete space_url(space)
      }.to change(Space, :count).by(-1)
    end

    it "redirects to the spaces list" do
      space = Space.create! valid_attributes
      delete space_url(space)
      expect(response).to redirect_to(spaces_url)
    end
  end
end
